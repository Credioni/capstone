import { useState, useEffect } from 'react';
import { Card, CardContent, Typography, Button, Box } from '@mui/material';

const TypewriterText = ({ text, typingSpeed = 30, maxChars = 300, ...args }) => {
  const [displayedText, setDisplayedText] = useState('');
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isComplete, setIsComplete] = useState(false);
  const [showFull, setShowFull] = useState(false);

  useEffect(() => {
    // Reset state when text changes
    setDisplayedText('');
    setCurrentIndex(0);
    setIsComplete(false);
    setShowFull(false);
  }, [text]);

  useEffect(() => {
    if (!text) return;

    const contentToType = text.split("</think>")[1] || text;

    if (currentIndex < contentToType.length) {
      const timer = setTimeout(() => {
        setDisplayedText(prev => prev + contentToType[currentIndex]);
        setCurrentIndex(prevIndex => prevIndex + 1);
      }, typingSpeed);

      return () => clearTimeout(timer);
    } else {
      setIsComplete(true);
    }
  }, [text, currentIndex, typingSpeed]);

  const fullText = text ? (text.split("</think>")[1] || text) : '';
  const isTruncated = fullText.length > maxChars;

  // Determine what text to show based on showFull state and animation completion
  const textToShow = () => {
    if (!isComplete) {
      return displayedText;
    }

    if (showFull || !isTruncated) {
      return fullText;
    }

    return fullText.slice(0, maxChars) + '...';
  };

  return (
    <Card {...args} sx={{ width: '100%', minWidth: 'fit-content' }}>
      <CardContent>
        <Typography variant="h6" component="div">
          {textToShow()}
        </Typography>

        {isComplete && isTruncated && (
          <Box sx={{ mt: 2, display: 'flex', justifyContent: 'center' }}>
            <Button
              variant="outlined"
              size="small"
              onClick={() => setShowFull(!showFull)}
            >
              {showFull ? "Show less" : "Show more"}
            </Button>
          </Box>
        )}

        <Typography
          variant="body1"
          sx={{
            color: 'text.secondary',
            mt: 1.5,
            opacity: isComplete ? 1 : 0,
            transition: 'opacity 0.5s ease-in-out'
          }}
        >
          {text ? "Generated by deepseek-ai/DeepSeek-R1-Distill-Qwen-1.5B" : ""}
        </Typography>
      </CardContent>
    </Card>
  );
};

export default TypewriterText;
export default TypewriterText;